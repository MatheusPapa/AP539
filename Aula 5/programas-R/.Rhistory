dados <- read.csv('../arquivos-aula05/cpu.csv', header=T)
## Lendo o banco de dados
dados <- read.csv('../arquivos-aula06/cpu.csv', header=T)
## Fazendo o boxplot do atributo 1
x = boxplot(dados[, 1])
x$stats
## Fazendo o boxplot dos atributos 1 e 3
x = boxplot(dados[, c(1,3)])
x$stats
## Fazendo o boxplot dos atributos 2 e 4
x = boxplot(dados[, c(2, 4)])
x$stats
## Fazendo o boxplot dos atributos 5 e 6
x = boxplot(dados[, c(5, 6)])
x$stats
outlierFactor = 3
## Para cada uma dos atributos
for (i in 1:ncol(x$stats)) {
## Adicionando os valores ao plot
text(y = x$stats[, i], labels = x$stats[, i], x = i + 0.5)
print(paste0("Box plot ", x$names[i],":"))
# Q1, Q2, Q3, Q4 e Q5
print(paste0("Minimo: ", x$stats[1, i]))
print(paste0("Q1: ", x$stats[2, i]))
print(paste0("Q2: ", x$stats[3, i]))
print(paste0("Q3: ", x$stats[4, i]))
print(paste0("Maximo: ", x$stats[5, i]))
# Limite inferior
limInferior = x$stats[2, i] - outlierFactor * (x$stats[4, i] - x$stats[2, i])
print(paste0("Limite inferior: ", limInferior))
inferior = sort(x$out[x$out <= limInferior & x$group == i])
print(paste0("Outliers (limite inferior): {", paste(inferior, collapse = ", "), "}"))
# Limite superior
limSuperior = x$stats[4, i] + outlierFactor * (x$stats[4, i] - x$stats[2, i])
print(paste0("Limite superior:", limSuperior))
superior = sort(x$out[x$out >= limSuperior & x$group == i])
print(paste0("Outliers (limite superior): {", paste(superior, collapse = ", "), "}"))
cat(sep = "\n\n")
}
## Exemplo de matriz
matriz=read.csv('../arquivos-aula06/Tecnificacao-Cerrado-Gado-de-Corte.csv', header = T)
## Exemplo de matriz
matriz=read.csv('../arquivos-aula06/Cluster-Flores.csv', header = T)
View(matriz)
View(matriz)
source ('funcoes.R')
## Exemplo de matriz
matriz=read.csv('../arquivos-aula06/Cluster-Flores.csv', header = T)
## Numero de clusters a serem avaliados
num_clusters = 15
## Resultado
## Se nao passar uma seed vai rodar aleatorio
result = retorna_clusters (matriz, num_clusters=15, seed = NULL)
## Plots
plota_clusters (result$SS_int_VIZ, result$SS_ext_VIZ)
matriz=matriz[,1]
## Exemplo de matriz
matriz=read.csv('../arquivos-aula06/Cluster-Flores.csv', header = T)
matriz <- matriz[,1]
## Exemplo de matriz
matriz=read.csv('../arquivos-aula06/Cluster-Flores.csv', header = T)
matriz <- matriz[,-1]
## Numero de clusters a serem avaliados
num_clusters = 15
## Resultado
## Se nao passar uma seed vai rodar aleatorio
result = retorna_clusters (matriz, num_clusters=15, seed = NULL)
source ('funcoes.R')
## Numero de clusters a serem avaliados
num_clusters = 15
## Resultado
## Se nao passar uma seed vai rodar aleatorio
result = retorna_clusters (matriz, num_clusters=15, seed = NULL)
## Plots
plota_clusters (result$SS_int_VIZ, result$SS_ext_VIZ)
## Numero de clusters a serem avaliados
num_clusters = 15
## Resultado
## Se nao passar uma seed vai rodar aleatorio
result = retorna_clusters (matriz, num_clusters=15, seed = NULL)
## Plots
plota_clusters (result$SS_int_VIZ, result$SS_ext_VIZ)
## Para obter os clusters, por exemplo 3
numero_de_clusters <- 3
## Resultado
## Se nao passar uma seed vai rodar aleatorio
result = retorna_clusters (matriz, num_clusters=15, seed = NULL)
## Plots
plota_clusters (result$SS_int_VIZ, result$SS_ext_VIZ)
## Para obter os clusters, por exemplo 3
numero_de_clusters <- 3
clsuter_escolhido <- kmeans(matriz,centers = numero_de_clusters, iter.max = 20)
## Clusters
clsuter_escolhido$cluster
## Numero de clusters a serem avaliados
num_clusters = 15
## Resultado
## Se nao passar uma seed vai rodar aleatorio
result = retorna_clusters (matriz, num_clusters=15, seed = NULL)
## Plots
plota_clusters (result$SS_int_VIZ, result$SS_ext_VIZ)
## Para obter os clusters, por exemplo 3
numero_de_clusters <- 3
clsuter_escolhido <- kmeans(matriz,centers = numero_de_clusters, iter.max = 20)
## Numero de clusters a serem avaliados
num_clusters = 15
## Resultado
## Se nao passar uma seed vai rodar aleatorio
result = retorna_clusters (matriz, num_clusters=15, seed = NULL)
## Plots
plota_clusters (result$SS_int_VIZ, result$SS_ext_VIZ)
## Para obter os clusters, por exemplo 3
numero_de_clusters <- 3
clsuter_escolhido <- kmeans(matriz,centers = numero_de_clusters, iter.max = 20)
## Clusters
clsuter_escolhido$cluster
source ('funcoes.R')
## Numero de clusters a serem avaliados
num_clusters = 15
## Resultado
## Se nao passar uma seed vai rodar aleatorio
result = retorna_clusters (matriz, num_clusters=15, seed = NULL)
## Plots
plota_clusters (result$SS_int_VIZ, result$SS_ext_VIZ)
source ('funcoes.R')
## Exemplo de matriz
matriz=read.csv('../arquivos-aula06/Cluster-Flores.csv', header = T)
## Numero de clusters a serem avaliados
num_clusters = 15
## Resultado
## Se nao passar uma seed vai rodar aleatorio
result = retorna_clusters (matriz, num_clusters=15, seed = NULL)
## Plots
plota_clusters (result$SS_int_VIZ, result$SS_ext_VIZ)
## Para obter os clusters, por exemplo 3
numero_de_clusters <- 3
clsuter_escolhido <- kmeans(matriz,centers = numero_de_clusters, iter.max = 20)
## Lendo o banco de dados
dados <- read.csv('../arquivos-aula06/cpu.csv', header=T)
## Lendo o banco de dados
dados <- read.csv('../arquivos-aula06/cpu.csv', header=T)
View(dados)
## Fazendo o boxplot do atributo 1
x = boxplot(dados[, 1])
## Fazendo o boxplot dos atributos 1 e 2
x = boxplot(dados[, c(1, 2)])
x$stats
x$stats
x$out
arquivos
## Lendo o banco de dados
dados <- read.csv('../arquivos-aula06/cpu.csv', header=T)
## Fazendo o boxplot do atributo 1
x = boxplot(dados[, 1])
x$stats
x$out
outlierFactor = 3
## Para cada uma dos atributos
for (i in 1:ncol(x$stats)) {
## Adicionando os valores ao plot
text(y = x$stats[, i], labels = x$stats[, i], x = i + 0.5)
print(paste0("Box plot ", x$names[i],":"))
# Q1, Q2, Q3, Q4 e Q5
print(paste0("Minimo: ", x$stats[1, i]))
print(paste0("Q1: ", x$stats[2, i]))
print(paste0("Q2: ", x$stats[3, i]))
print(paste0("Q3: ", x$stats[4, i]))
print(paste0("Maximo: ", x$stats[5, i]))
# Limite inferior
limInferior = x$stats[2, i] - outlierFactor * (x$stats[4, i] - x$stats[2, i])
print(paste0("Limite inferior: ", limInferior))
inferior = sort(x$out[x$out <= limInferior & x$group == i])
print(paste0("Outliers (limite inferior): {", paste(inferior, collapse = ", "), "}"))
# Limite superior
limSuperior = x$stats[4, i] + outlierFactor * (x$stats[4, i] - x$stats[2, i])
print(paste0("Limite superior:", limSuperior))
superior = sort(x$out[x$out >= limSuperior & x$group == i])
print(paste0("Outliers (limite superior): {", paste(superior, collapse = ", "), "}"))
cat(sep = "\n\n")
}
library(car)
## Lendo o banco de dados
dados <- read.csv('../arquivos-aula06/cpu.csv', header=T)
## Fazendo o boxplot dos atributos 1 e 3
x = boxplot(dados[, c(1,3)])
x$stats
## Fazendo o boxplot dos atributos 2 e 4
x = boxplot(dados[, c(2, 4)])
x$stats
## Fazendo o boxplot dos atributos 5 e 6
x = boxplot(dados[, c(5, 6)])
x$stats
outlierFactor = 3
## Para cada uma dos atributos
for (i in 1:ncol(x$stats)) {
## Adicionando os valores ao plot
text(y = x$stats[, i], labels = x$stats[, i], x = i + 0.5)
print(paste0("Box plot ", x$names[i],":"))
# Q1, Q2, Q3, Q4 e Q5
print(paste0("Minimo: ", x$stats[1, i]))
print(paste0("Q1: ", x$stats[2, i]))
print(paste0("Q2: ", x$stats[3, i]))
print(paste0("Q3: ", x$stats[4, i]))
print(paste0("Maximo: ", x$stats[5, i]))
# Limite inferior
limInferior = x$stats[2, i] - outlierFactor * (x$stats[4, i] - x$stats[2, i])
print(paste0("Limite inferior: ", limInferior))
inferior = sort(x$out[x$out <= limInferior & x$group == i])
print(paste0("Outliers (limite inferior): {", paste(inferior, collapse = ", "), "}"))
# Limite superior
limSuperior = x$stats[4, i] + outlierFactor * (x$stats[4, i] - x$stats[2, i])
print(paste0("Limite superior:", limSuperior))
superior = sort(x$out[x$out >= limSuperior & x$group == i])
print(paste0("Outliers (limite superior): {", paste(superior, collapse = ", "), "}"))
cat(sep = "\n\n")
}
## Fazendo o boxplot dos atributos 1 e 3
x = boxplot(dados[, c(1,3)])
x$stats
outlierFactor = 3
## Para cada uma dos atributos
for (i in 1:ncol(x$stats)) {
## Adicionando os valores ao plot
text(y = x$stats[, i], labels = x$stats[, i], x = i + 0.5)
print(paste0("Box plot ", x$names[i],":"))
# Q1, Q2, Q3, Q4 e Q5
print(paste0("Minimo: ", x$stats[1, i]))
print(paste0("Q1: ", x$stats[2, i]))
print(paste0("Q2: ", x$stats[3, i]))
print(paste0("Q3: ", x$stats[4, i]))
print(paste0("Maximo: ", x$stats[5, i]))
# Limite inferior
limInferior = x$stats[2, i] - outlierFactor * (x$stats[4, i] - x$stats[2, i])
print(paste0("Limite inferior: ", limInferior))
inferior = sort(x$out[x$out <= limInferior & x$group == i])
print(paste0("Outliers (limite inferior): {", paste(inferior, collapse = ", "), "}"))
# Limite superior
limSuperior = x$stats[4, i] + outlierFactor * (x$stats[4, i] - x$stats[2, i])
print(paste0("Limite superior:", limSuperior))
superior = sort(x$out[x$out >= limSuperior & x$group == i])
print(paste0("Outliers (limite superior): {", paste(superior, collapse = ", "), "}"))
cat(sep = "\n\n")
}
## Fazendo o boxplot dos atributos 1 e 3
x = boxplot(dados[, c(3)])
x$stats
outlierFactor = 3
## Para cada uma dos atributos
for (i in 1:ncol(x$stats)) {
## Adicionando os valores ao plot
text(y = x$stats[, i], labels = x$stats[, i], x = i + 0.5)
print(paste0("Box plot ", x$names[i],":"))
# Q1, Q2, Q3, Q4 e Q5
print(paste0("Minimo: ", x$stats[1, i]))
print(paste0("Q1: ", x$stats[2, i]))
print(paste0("Q2: ", x$stats[3, i]))
print(paste0("Q3: ", x$stats[4, i]))
print(paste0("Maximo: ", x$stats[5, i]))
# Limite inferior
limInferior = x$stats[2, i] - outlierFactor * (x$stats[4, i] - x$stats[2, i])
print(paste0("Limite inferior: ", limInferior))
inferior = sort(x$out[x$out <= limInferior & x$group == i])
print(paste0("Outliers (limite inferior): {", paste(inferior, collapse = ", "), "}"))
# Limite superior
limSuperior = x$stats[4, i] + outlierFactor * (x$stats[4, i] - x$stats[2, i])
print(paste0("Limite superior:", limSuperior))
superior = sort(x$out[x$out >= limSuperior & x$group == i])
print(paste0("Outliers (limite superior): {", paste(superior, collapse = ", "), "}"))
cat(sep = "\n\n")
}
source ('funcoes.R')
## Exemplo de matriz
matriz=read.csv('../arquivos-aula06/Cluster-Flores.csv', header = T)
source ('funcoes.R')
## Exemplo de matriz
matriz=read.csv('../arquivos-aula06/Cluster-Flores.csv', header = T)
View(matriz)
## Numero de clusters a serem avaliados
num_clusters = 15
## Resultado
## Se nao passar uma seed vai rodar aleatorio
result = retorna_clusters (matriz, num_clusters=15, seed = NULL)
matriz <- matriz[,-1]
## Numero de clusters a serem avaliados
num_clusters = 15
## Resultado
## Se nao passar uma seed vai rodar aleatorio
result = retorna_clusters (matriz, num_clusters=15, seed = NULL)
## Plots
plota_clusters (result$SS_int_VIZ, result$SS_ext_VIZ)
## Numero de clusters a serem avaliados
num_clusters = 15
## Resultado
## Se nao passar uma seed vai rodar aleatorio
result = retorna_clusters (matriz, num_clusters=15, seed = NULL)
## Plots
plota_clusters (result$SS_int_VIZ, result$SS_ext_VIZ)
## Lendo o banco de dados
dados <- read.csv('../arquivos-aula06/cpu.csv', header=T)
## Lendo o banco de dados
dados <- read.csv('../arquivos-aula06/cpu.csv', header=T)
## Fazendo o boxplot do atributo 1
x = boxplot(dados[, 1])
## Lendo o banco de dados
dados <- read.csv('cpu.csv', header=T)
View(dados)
## Fazendo o boxplot do atributo 1
x = boxplot(dados[, 1])
x$stats
## Fazendo o boxplot dos atributos 1 e 2
x = boxplot(dados[, c(1, 2)])
x$stats
## Fazendo o boxplot do atributo 1
x = boxplot(dados[, 1])
x$stats
## Fazendo o boxplot dos atributos 1 e 2
x = boxplot(dados[, c(1, 2)])
x$stats
## Fazendo o boxplot de todos os atributos
x = boxplot(dados)
## Fazendo o boxplot do atributo 1
x = boxplot(dados[, 1])
x$stats
x$out
## Para cada uma dos atributos
for (i in 1:ncol(x$stats)) {
## Adicionando os valores ao plot
text(y = x$stats[, i], labels = x$stats[, i], x = i + 0.5)
print(paste0("Box plot ", x$names[i],":"))
# Q1, Q2, Q3, Q4 e Q5
print(paste0("Minimo: ", x$stats[1, i]))
print(paste0("Q1: ", x$stats[2, i]))
print(paste0("Q2: ", x$stats[3, i]))
print(paste0("Q3: ", x$stats[4, i]))
print(paste0("Maximo: ", x$stats[5, i]))
# Limite inferior
limInferior = x$stats[2, i] - outlierFactor * (x$stats[4, i] - x$stats[2, i])
print(paste0("Limite inferior: ", limInferior))
inferior = sort(x$out[x$out <= limInferior & x$group == i])
print(paste0("Outliers (limite inferior): {", paste(inferior, collapse = ", "), "}"))
# Limite superior
limSuperior = x$stats[4, i] + outlierFactor * (x$stats[4, i] - x$stats[2, i])
print(paste0("Limite superior:", limSuperior))
superior = sort(x$out[x$out >= limSuperior & x$group == i])
print(paste0("Outliers (limite superior): {", paste(superior, collapse = ", "), "}"))
cat(sep = "\n\n")
}
outlierFactor = 3
## Para cada uma dos atributos
for (i in 1:ncol(x$stats)) {
## Adicionando os valores ao plot
text(y = x$stats[, i], labels = x$stats[, i], x = i + 0.5)
print(paste0("Box plot ", x$names[i],":"))
# Q1, Q2, Q3, Q4 e Q5
print(paste0("Minimo: ", x$stats[1, i]))
print(paste0("Q1: ", x$stats[2, i]))
print(paste0("Q2: ", x$stats[3, i]))
print(paste0("Q3: ", x$stats[4, i]))
print(paste0("Maximo: ", x$stats[5, i]))
# Limite inferior
limInferior = x$stats[2, i] - outlierFactor * (x$stats[4, i] - x$stats[2, i])
print(paste0("Limite inferior: ", limInferior))
inferior = sort(x$out[x$out <= limInferior & x$group == i])
print(paste0("Outliers (limite inferior): {", paste(inferior, collapse = ", "), "}"))
# Limite superior
limSuperior = x$stats[4, i] + outlierFactor * (x$stats[4, i] - x$stats[2, i])
print(paste0("Limite superior:", limSuperior))
superior = sort(x$out[x$out >= limSuperior & x$group == i])
print(paste0("Outliers (limite superior): {", paste(superior, collapse = ", "), "}"))
cat(sep = "\n\n")
}
## Lendo o banco de dados
dados <- read.csv('cpu.csv', header=T)
## Fazendo o boxplot dos atributos 1 e 3
x = boxplot(dados[, c(1,3)])
x$stats
outlierFactor = 3
## Para cada uma dos atributos
for (i in 1:ncol(x$stats)) {
## Adicionando os valores ao plot
text(y = x$stats[, i], labels = x$stats[, i], x = i + 0.5)
print(paste0("Box plot ", x$names[i],":"))
# Q1, Q2, Q3, Q4 e Q5
print(paste0("Minimo: ", x$stats[1, i]))
print(paste0("Q1: ", x$stats[2, i]))
print(paste0("Q2: ", x$stats[3, i]))
print(paste0("Q3: ", x$stats[4, i]))
print(paste0("Maximo: ", x$stats[5, i]))
# Limite inferior
limInferior = x$stats[2, i] - outlierFactor * (x$stats[4, i] - x$stats[2, i])
print(paste0("Limite inferior: ", limInferior))
inferior = sort(x$out[x$out <= limInferior & x$group == i])
print(paste0("Outliers (limite inferior): {", paste(inferior, collapse = ", "), "}"))
# Limite superior
limSuperior = x$stats[4, i] + outlierFactor * (x$stats[4, i] - x$stats[2, i])
print(paste0("Limite superior:", limSuperior))
superior = sort(x$out[x$out >= limSuperior & x$group == i])
print(paste0("Outliers (limite superior): {", paste(superior, collapse = ", "), "}"))
cat(sep = "\n\n")
}
x = boxplot(dados)
source ('funcoes.R')
## Este programa contÃ©m algumas funÃ§Ãµes que sÃ£o chamdas pelo programa main.R
## Autores: David Ferreira Junior e Stanley Oliveira
retorna_clusters = function (matriz, num_clusters, seed = NULL)
{
## SS total da SS INTER CLUSTER
SS_int_VIZ    <- 0
## SS total EXTRA CLUSTER
SS_ext_VIZ    <- 0
## Calcula os k clusters
for (k in 1:num_clusters)
{
## Mesma semente
if (!is.null(seed))
set.seed(seed)
cluster_ajuste <- kmeans(matriz,centers = (k+1), iter.max = 20)
## SS total da SS INTER CLUSTER
SS_int_VIZ[k] <- cluster_ajuste$tot.withinss
## SS total EXTRA CLUSTER
SS_ext_VIZ[k] <- cluster_ajuste$betweenss
}
return ( list ( SS_int_VIZ = SS_int_VIZ,
SS_ext_VIZ = SS_ext_VIZ) )
}
plota_clusters = function (SS_int_VIZ, SS_ext_VIZ)
{
## Plots Dissimilaridade Interna e Externa
par(mfrow=c(2,2))
par(pty="m")
plot(SS_int_VIZ,type="b", pch=19, xlab="Numero de clusters",
ylab="Dissimilaridade Interna", axes=F, lwd=2, main="(A) Dissimilaridade Interna")
axis(1, 1:length(SS_int_VIZ), 2:(length(SS_int_VIZ)+1))
axis(2)
box()
plot(SS_ext_VIZ,type="b", pch=19, xlab="Numero de clusters",
ylab="Dissimilaridade Externa", axes=F, lwd=2, main="(B) Dissimilaridade Externa")
axis(1, 1:length(SS_ext_VIZ), 2:(length(SS_ext_VIZ)+1))
axis(2)
box()
## Calculo dos deltas
difs_int_VIZ <- ((SS_int_VIZ[2:length(SS_int_VIZ)] - SS_int_VIZ[1:(length(SS_int_VIZ)-1)])/max(SS_int_VIZ)*100)
difs_ext_VIZ <- ((SS_ext_VIZ[2:length(SS_ext_VIZ)] - SS_ext_VIZ[1:(length(SS_ext_VIZ)-1)])/max(SS_ext_VIZ)*100)
## Plota os deltas
plot(difs_int_VIZ,type="b", pch=19, xlab="Numero de clusters",
ylab="Valores Deltas", axes=F, lwd=2, main="(C) Deltas da Dissimilaridade Interna")
axis(1, seq(1,length(difs_int_VIZ)), seq(3,( length(difs_int_VIZ)) +2))
axis(2)
box()
plot(difs_ext_VIZ,type="b", pch=19, xlab="Numero de clusters",
ylab="Valores Deltas", axes=F, lwd=2, main="(D) Deltas da Dissimilaridade Externa")
axis(1, seq(1,length(difs_ext_VIZ)), seq(3,(length(difs_ext_VIZ))+2) )
axis(2)
box()
## % acumulada do delta SS interno das diferencas dos k's
acum_int_VIZ = 0
acum_int_VIZ[1] <- difs_int_VIZ[1]
for (i in 2:length(difs_int_VIZ))
{
acum_int_VIZ[i] <- acum_int_VIZ[i-1] + difs_int_VIZ[i]
}
acum_ext_VIZ = 0
acum_ext_VIZ[1] <- difs_ext_VIZ[1]
for (i in 2:length(difs_ext_VIZ))
{
acum_ext_VIZ[i] <- acum_ext_VIZ[i-1] + difs_ext_VIZ[i]
}
## Printa na tela
## Interna
cat('\n\n')
print('CALCULOS Dissimilaridade INTERNA')
cat('\n')
print('(A) Dissimilaridade Interna')
cat('\n')
print (SS_int_VIZ)
cat('\n\n')
print('(C) Deltas da Dissimilaridade Interna ')
cat('\n')
print (difs_int_VIZ)
cat('\n\n')
print('Acumulada Delta da Dissimilaridade Interna ')
cat('\n')
print (acum_int_VIZ/acum_int_VIZ[length(difs_int_VIZ)])
cat('\n\n')
## Externa
cat('\n\n')
print('CALCULOS Dissimilaridade EXTERNA')
cat('\n')
print('(B) Dissimilaridade Externa')
cat('\n')
print (SS_ext_VIZ)
cat('\n\n')
print('(C) Deltas da Dissimilaridade Externa ')
cat('\n')
print (difs_ext_VIZ)
cat('\n\n')
print('Acumulada Delta da Dissimilaridade Externa ')
cat('\n')
print (acum_ext_VIZ/acum_ext_VIZ[length(difs_ext_VIZ)])
cat('\n\n')
}
## Exemplo de matriz
matriz=read.csv('../arquivos-aula05/Cluster-Flores.csv', header = T)
View(matriz)
matriz <- matriz[,-1] ## Elimina a coluna numero 1
## Numero de clusters a serem avaliados
num_clusters = 15
## Resultado
## Se nao passar uma seed vai rodar aleatorio
result = retorna_clusters (matriz, num_clusters=15, seed = NULL)
## Plots
plota_clusters (result$SS_int_VIZ, result$SS_ext_VIZ)
